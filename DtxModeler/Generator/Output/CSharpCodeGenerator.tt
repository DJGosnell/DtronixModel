<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="DtxModeler.Ddl" #>
<# 
string[] reserved_words = new string[] {"for", "with", "while"};
#>

using System;
using System.Data.Common;
using System.Collections.Generic;
using DtxModel;

namespace <#= this.database.Namespace #> {

	public partial class <#= this.database.ContextClass #> : Context {
		private static Func<DbConnection> _DefaultConnection = null;

		/// <summary>
		/// Set a default constructor to allow use of parameter-less context calling.
		/// </summary>
		public static Func<DbConnection> DefaultConnection {
			get { return _DefaultConnection; }
			set { _DefaultConnection = value; }
		}

		private static string _LastInsertIdQuery = null;

		/// <summary>
		/// Sets the query string to retrieve the last insert ID.
		/// </summary>
		public static new string LastInsertIdQuery {
			get { return _LastInsertIdQuery; }
			set { _LastInsertIdQuery = value; }
		}

		private static TargetDb _DatabaseType;

		/// <summary>
		/// Type of database this context will target.  Automatically sets proper database specific values.
		/// </summary>
		public static TargetDb DatabaseType {
			get { return _DatabaseType; }
			set {
				_DatabaseType = value;
				switch (value) {
					case TargetDb.MySql:
						LastInsertIdQuery = "SELECT last_insert_id()";
						break;
					case TargetDb.Sqlite:
						LastInsertIdQuery = "SELECT last_insert_rowid()";
						break;
					case TargetDb.Other:
						break;
				}
			}
		}
<# foreach (var table in database.Table) { #>
		private Table<<#= table.Name #>> _<#= table.Name #>;

		public Table<<#= table.Name #>> <#= table.Name #> {
			get {
				if (_<#= table.Name #> == null) {
					_<#= table.Name #> = new Table<<#= table.Name #>>(this);
				}

				return _<#= table.Name #>;
			}
		}

<# } #>
		/// <summary>
		/// Create a new context of this database's type.  Can only be used if a default connection is specified.
		/// </summary>
		public <#= this.database.ContextClass #>() : base(_DefaultConnection, _LastInsertIdQuery) { }

		/// <summary>
		/// Create a new context of this database's type with a specific connection.
		/// </summary>
		/// <param name="connection">Existing open database connection to use.</param>
		public <#= this.database.ContextClass #>(DbConnection connection) : base(connection, _LastInsertIdQuery) { }
	}
<# foreach (var table in database.Table) { 
	Column pk_column = null;

	foreach (var column in table.Column) {
		if (pk_column == null && column.IsPrimaryKey) {
			pk_column = column;
		}
	} #>

	[TableAttribute(Name = "<#= table.Name #>")]
	public partial class <#= table.Name #> : Model {

<# foreach (var column in table.Column) { #>
<# if (column.IsReadOnly == false) { #>
		private bool _<#= column.Name #>Changed = false;
<# } #>
		private <#= ColumnNetType(column) #> _<#= column.Name #>;
<# if (string.IsNullOrWhiteSpace(column.Description) == false) { #>
		/// <summary>
		/// <#= column.Description #>
		/// </summary>
<# } #>
		public <#= ColumnNetType(column) #> <# if(reserved_words.Contains(column.Name)){ this.Write("@"); } #><#= column.Name #> {
			get { return _<#= column.Name #>; }
<# if (column.IsReadOnly == false) { #>
			set {
<# if (column.DbLength != 0 && column.NetType == NetTypes.String) { #>
				if(value != null && value.Length > <#= column.DbLength #>) 
					throw new ArgumentOutOfRangeException("<#= column.Name #>", "String <#= column.Name #> is too long. Max length allowed is <#= column.DbLength #> characters. Passed string is " + value.Length.ToString() + " characters.");
<# } #>
				_<#= column.Name #> = value;
				_<#= column.Name #>Changed = true;
			}
<#			} #>
		}

<# } #>
<# 
foreach (var db_assoc in database.Association) {
	var reference = db_assoc.ReferencesTable(table);
	var assoc = new AssociationCodeGenerator();

	if (reference == Association.Reference.R1) {
		assoc.ThisAssociationName = db_assoc.Table1Name;
		assoc.ThisColumn = db_assoc.GetReferenceColumn(database, Association.Reference.R1);
		assoc.ThisTable = table;
		assoc.ThisCardinality = db_assoc.Table1Cardinality;

		assoc.OtherAssociationName = db_assoc.Table2Name;
		assoc.OtherColumn = db_assoc.GetReferenceColumn(database, Association.Reference.R2);
		assoc.OtherTable = database.Table.Single(t => t.Name == db_assoc.Table2);
		assoc.OtherCardinality = db_assoc.Table2Cardinality;
					

	} else if (reference == Association.Reference.R2) {
		assoc.ThisAssociationName = db_assoc.Table2Name;
		assoc.ThisColumn = db_assoc.GetReferenceColumn(database, Association.Reference.R2);
		assoc.ThisTable = table;
		assoc.ThisCardinality = db_assoc.Table2Cardinality;

		assoc.OtherAssociationName = db_assoc.Table1Name;
		assoc.OtherColumn = db_assoc.GetReferenceColumn(database, Association.Reference.R1);
		assoc.OtherTable = database.Table.Single(t => t.Name == db_assoc.Table1);
		assoc.OtherCardinality = db_assoc.Table1Cardinality;

	} else {
		continue;
	}

	string field_type = assoc.OtherTable.Name;
	if (assoc.OtherCardinality == Cardinality.Many) {
		field_type += "[]";
	} 
	string fetch_type;

	if (assoc.OtherCardinality == Cardinality.Many) {
		fetch_type = "ExecuteFetchAll();";
	} else {
		fetch_type = "ExecuteFetch();";
	} #>
	private <#= field_type #> _<#= assoc.OtherAssociationName #>;
	public <#= field_type #> <#= assoc.OtherAssociationName #> {
		get {
			if (_<#= assoc.OtherAssociationName #> == null) {
				try {
					_<#= assoc.OtherAssociationName #> = ((<#= database.ContextClass #>)context).<#= assoc.OtherTable.Name #>.Select().WhereIn("<#= assoc.OtherColumn.Name #>", _<#= assoc.ThisColumn.Name #>).<#= fetch_type #>
				} catch {
					//Accessing a property outside of its database context is not allowed.  Access an association inside the database context to cache the values for later use.
					_<#= assoc.OtherAssociationName #> = null;
				}
			}
			return _<#= assoc.OtherAssociationName #>;
		}
	}
		
<# } #>
		public <#= table.Name #>() : this(null, null) { }

		public <#= table.Name #>(DbDataReader reader, Context context) {
			Read(reader, context);
		}

		public override void Read(DbDataReader reader, Context context) {
			this.context = context;
			if (reader == null) { return; }
			int length = reader.FieldCount;
			for (int i = 0; i < length; i++) {
				switch (reader.GetName(i)) {
<# foreach (var column in table.Column) {
		string type = ColumnNetType(column);
		string reader_get = Enum.GetName(typeof(NetTypes), column.NetType);

		if (column.NetType == NetTypes.ByteArray) { #>
					case "<#= column.Name #>": _<#= column.Name #> = (reader.IsDBNull(i)) ? null : reader.GetFieldValue<byte[]>(i); break;
<# } else if (column.Nullable) { #>
					case "<#= column.Name #>": _<#= column.Name #> = (reader.IsDBNull(i)) ? default(<#= type #>) : reader.Get<#= reader_get #>(i); break;
<# } else if (column.NetType == NetTypes.String) { #>
					case "<#= column.Name #>": _<#= column.Name #> = reader.GetValue(i) as string; break;
<# } else { #>
					case "<#= column.Name #>": _<#= column.Name #> = reader.Get<#= reader_get #>(i); break;
<# } #>
<# } #>
					default: additional_values.Add(reader.GetName(i), reader.GetValue(i)); break;
				}
			}
		}

		public override Dictionary<string, object> GetChangedValues() {
			var changed = new Dictionary<string, object>();
<# foreach (var column in table.Column) { 
	if (column.IsPrimaryKey) {
		 continue;
	} #>
			if (_<#= column.Name #>Changed)
				changed.Add("<#= column.Name #>", _<#= column.Name #>);
<# } #>

			return changed;
		}

		public override object[] GetAllValues() {
			return new object[] {
<# foreach (var column in table.Column) {
	if (column.IsPrimaryKey) {
		 continue;
	} #>
				_<#= column.Name #>,
<# } #>
			};
		}

		public override string[] GetColumns() {
			return new string[] {
<# foreach (var column in table.Column) { 
	if (column.IsPrimaryKey) {
		 continue;
	} #>
				"<#= column.Name #>",
<# } #>
			};
		}

<# if (pk_column != null) { #>
		public override string GetPKName() {
			return "<#= pk_column.Name #>";
		}

		public override object GetPKValue() {
			return _<#= pk_column.Name #>;
		}
<# } #>
	}
<# } #>
}