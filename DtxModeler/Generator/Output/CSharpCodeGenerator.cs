// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DtxModeler.Generator.Output
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using DtxModeler.Ddl;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class CSharpCodeGenerator : CSharpCodeGeneratorBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
 
string[] reserved_words = new string[] {"for", "with", "while"};

            this.Write("using System;\r\nusing System.Data.Common;\r\nusing System.Collections.Generic;\r\nusin" +
                    "g System.Collections;\r\nusing DtxModel;\r\n\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.database.Namespace));
            this.Write(" {\r\n\r\n\tpublic partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.database.ContextClass));
            this.Write(@" : Context {
		private static Func<DbConnection> _DefaultConnection = null;

		/// <summary>
		/// Set a default constructor to allow use of parameter-less context calling.
		/// </summary>
		public static Func<DbConnection> DefaultConnection {
			get { return _DefaultConnection; }
			set { _DefaultConnection = value; }
		}

		private static string _LastInsertIdQuery = null;

		/// <summary>
		/// Sets the query string to retrieve the last insert ID.
		/// </summary>
		public static new string LastInsertIdQuery {
			get { return _LastInsertIdQuery; }
			set { _LastInsertIdQuery = value; }
		}

		private static TargetDb _DatabaseType;

		/// <summary>
		/// Type of database this context will target.  Automatically sets proper database specific values.
		/// </summary>
		public static TargetDb DatabaseType {
			get { return _DatabaseType; }
			set {
				_DatabaseType = value;
				switch (value) {
					case TargetDb.MySql:
						LastInsertIdQuery = ""SELECT last_insert_id()"";
						break;
					case TargetDb.Sqlite:
						LastInsertIdQuery = ""SELECT last_insert_rowid()"";
						break;
					case TargetDb.Other:
						break;
				}
			}
		}
");
 foreach (var table in database.Table) { 
            this.Write("\t\tprivate Table<");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write("> _");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(";\r\n\r\n\t\tpublic Table<");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" {\r\n\t\t\tget {\r\n\t\t\t\tif (_");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" == null) {\r\n\t\t\t\t\t_");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" = new Table<");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(">(this);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn _");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(";\r\n\t\t\t}\r\n\t\t}\r\n\r\n");
 } 
            this.Write("\t\t/// <summary>\r\n\t\t/// Create a new context of this database\'s type.  Can only be" +
                    " used if a default connection is specified.\r\n\t\t/// </summary>\r\n\t\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.database.ContextClass));
            this.Write(@"() : base(_DefaultConnection, _LastInsertIdQuery) { }

		/// <summary>
		/// Create a new context of this database's type with a specific connection.
		/// </summary>
		/// <param name=""connection"">Existing open database connection to use.</param>
		public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.database.ContextClass));
            this.Write("(DbConnection connection) : base(connection, _LastInsertIdQuery) { }\r\n\t}\r\n");
 foreach (var table in database.Table) { 
	Column pk_column = null;

	foreach (var column in table.Column) {
		if (pk_column == null && column.IsPrimaryKey) {
			pk_column = column;
		}
	} 
            this.Write("\r\n\t[TableAttribute(Name = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write("\")]\r\n\tpublic partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" : Model {\r\n");
 for(int i = 0; i < table.Column.Count(); i++) { 
            this.Write("\t\tprivate ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ColumnNetType(table.Column[i])));
            this.Write(" _");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(";\r\n");
 if (string.IsNullOrWhiteSpace(table.Column[i].Description) == false) { 
            this.Write("\t\t/// <summary>\r\n\t\t/// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Description));
            this.Write("\r\n\t\t/// </summary>\r\n");
 } 
            this.Write("\t\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ColumnNetType(table.Column[i])));
            this.Write(" ");
 if(reserved_words.Contains(table.Column[i].Name)){ this.Write("@"); } 
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(" {\r\n\t\t\tget { return _");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write("; }\r\n");
 if (table.Column[i].IsReadOnly == false) { 
            this.Write("\t\t\tset {\r\n");
 if (table.Column[i].DbLength != 0 && table.Column[i].NetType == NetTypes.String) { 
            this.Write("\t\t\t\tif(value != null && value.Length > ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].DbLength));
            this.Write(") \r\n\t\t\t\t\tthrow new ArgumentOutOfRangeException(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write("\", \"String ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(" is too long. Max length allowed is ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].DbLength));
            this.Write(" characters. Passed string is \" + value.Length.ToString() + \" characters.\");\r\n");
 } 
            this.Write("\t\t\t\t_");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(" = value;\r\n\t\t\t\tchanged_flags.Set(");
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            this.Write(", true);\r\n\t\t\t}\r\n");
			} 
            this.Write("\t\t}\r\n\r\n");
 } 
 
foreach (var db_assoc in database.Association) {
	var reference = db_assoc.ReferencesTable(table);
	var assoc = new AssociationCodeGenerator();

	if (reference == Association.Reference.R1) {
		assoc.ThisAssociationName = db_assoc.Table1Name;
		assoc.ThisColumn = db_assoc.GetReferenceColumn(database, Association.Reference.R1);
		assoc.ThisTable = table;
		assoc.ThisCardinality = db_assoc.Table1Cardinality;

		assoc.OtherAssociationName = db_assoc.Table2Name;
		assoc.OtherColumn = db_assoc.GetReferenceColumn(database, Association.Reference.R2);
		assoc.OtherTable = database.Table.Single(t => t.Name == db_assoc.Table2);
		assoc.OtherCardinality = db_assoc.Table2Cardinality;
					

	} else if (reference == Association.Reference.R2) {
		assoc.ThisAssociationName = db_assoc.Table2Name;
		assoc.ThisColumn = db_assoc.GetReferenceColumn(database, Association.Reference.R2);
		assoc.ThisTable = table;
		assoc.ThisCardinality = db_assoc.Table2Cardinality;

		assoc.OtherAssociationName = db_assoc.Table1Name;
		assoc.OtherColumn = db_assoc.GetReferenceColumn(database, Association.Reference.R1);
		assoc.OtherTable = database.Table.Single(t => t.Name == db_assoc.Table1);
		assoc.OtherCardinality = db_assoc.Table1Cardinality;

	} else {
		continue;
	}

	string field_type = assoc.OtherTable.Name;
	if (assoc.OtherCardinality == Cardinality.Many) {
		field_type += "[]";
	} 
	string fetch_type;

	if (assoc.OtherCardinality == Cardinality.Many) {
		fetch_type = "ExecuteFetchAll();";
	} else {
		fetch_type = "ExecuteFetch();";
	} 
            this.Write("\t\tprivate ");
            this.Write(this.ToStringHelper.ToStringWithCulture(field_type));
            this.Write(" _");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherAssociationName));
            this.Write(";\r\n\t\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(field_type));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherAssociationName));
            this.Write(" {\r\n\t\t\tget {\r\n\t\t\t\tif (_");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherAssociationName));
            this.Write(" == null) {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\t_");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherAssociationName));
            this.Write(" = ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(database.ContextClass));
            this.Write(")context).");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherTable.Name));
            this.Write(".Select().WhereIn(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherColumn.Name));
            this.Write("\", _");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.ThisColumn.Name));
            this.Write(").");
            this.Write(this.ToStringHelper.ToStringWithCulture(fetch_type));
            this.Write("\r\n\t\t\t\t\t} catch {\r\n\t\t\t\t\t\t//Accessing a property outside of its database context is" +
                    " not allowed.  Access an association inside the database context to cache the va" +
                    "lues for later use.\r\n\t\t\t\t\t\t_");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherAssociationName));
            this.Write(" = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn _");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherAssociationName));
            this.Write(";\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n");
 } 
            this.Write("\t\t/// <summary>\r\n\t\t/// Clones a ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" model.\r\n\t\t/// </summary>\r\n\t\t/// <param name=\"source\">Source ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" model to clone from.</param>\r\n\t\t/// <param name=\"only_changes\">True to only clon" +
                    "e the changes from the source. False to clone all the values regardless of chang" +
                    "ed or unchanged.</param>\r\n\t\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" source, bool only_changes = false) { \r\n");
 for(int i = 0; i < table.Column.Count(); i++) { 
			if (table.Column[i].IsPrimaryKey) { 
            this.Write("\t\t\t_");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(" = source._");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(";\r\n");
 } 
            this.Write("\t\t\tif (only_changes == false || source.changed_flags.Get(");
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            this.Write("))\r\n\t\t\t\t_");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(" = source._");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(";\r\n");
 } 
            this.Write("\t\t\tchanged_flags = new BitArray(source.changed_flags);\r\n\t\t}\r\n\t\t\r\n\t\t/// <summary>\r" +
                    "\n\t\t/// Creates a empty ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" model. Use this for creating a new row and inserting into the database.\r\n\t\t/// <" +
                    "/summary>\r\n\t\tpublic ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write("() : this(null, null) { }\r\n\r\n\t\t/// <summary>\r\n\t\t/// Creates a ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(@" model and reads the row information from the table into this model.
		/// </summary>
		/// <param name=""reader"">Instance of a live data reader for this model's table.</param>
		/// <param name=""context"">The current context of the database.</param>
		public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write("(DbDataReader reader, Context context) {\r\n\t\t\tchanged_flags = new BitArray(");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column.Count()));
            this.Write(@");
			Read(reader, context);
		}

		/// <summary>
		/// Reads the row information from the table into this model.
		/// </summary>
		/// <param name=""reader"">Instance of a live data reader for this model's table.</param>
		/// <param name=""context"">The current context of the database.</param>
		public override void Read(DbDataReader reader, Context context) {
			this.context = context;
			if (reader == null) { return; }
			int length = reader.FieldCount;
			for (int i = 0; i < length; i++) {
				switch (reader.GetName(i)) {
");
 foreach (var column in table.Column) {
		string type = ColumnNetType(column);
		string reader_get = Enum.GetName(typeof(NetTypes), column.NetType);

		if(reader_get == "DateTimeOffset") {
			reader_get = "DateTime";
		}

		if (column.NetType == NetTypes.ByteArray) { 
            this.Write("\t\t\t\t\tcase \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write("\": _");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write(" = (reader.IsDBNull(i)) ? null : reader.GetFieldValue<byte[]>(i); break;\r\n");
 } else if (column.Nullable) { 
            this.Write("\t\t\t\t\tcase \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write("\": _");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write(" = (reader.IsDBNull(i)) ? default(");
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            this.Write(") : reader.Get");
            this.Write(this.ToStringHelper.ToStringWithCulture(reader_get));
            this.Write("(i); break;\r\n");
 } else if (column.NetType == NetTypes.String) { 
            this.Write("\t\t\t\t\tcase \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write("\": _");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write(" = reader.GetValue(i) as string; break;\r\n");
 } else { 
            this.Write("\t\t\t\t\tcase \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write("\": _");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write(" = reader.Get");
            this.Write(this.ToStringHelper.ToStringWithCulture(reader_get));
            this.Write("(i); break;\r\n");
 } 
 } 
            this.Write(@"					default: additional_values.Add(reader.GetName(i), reader.GetValue(i)); break;
				}
			}
		}

		/// <summary>
		/// Gets all the instance values in the model which have been changed.
		/// </summary>
		/// <returns>Dictionary with the keys of the column names and values of the properties.</returns>
		public override Dictionary<string, object> GetChangedValues() {
			var changed = new Dictionary<string, object>();
");
 for(int i = 0; i < table.Column.Count(); i++) { 
	if (table.Column[i].IsPrimaryKey) {
		 continue;
	} 
            this.Write("\t\t\tif (changed_flags.Get(");
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            this.Write("))\r\n\t\t\t\tchanged.Add(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write("\", _");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(");\r\n");
 } 
            this.Write(@"
			return changed;
		}

		/// <summary>
		/// Return all the instance values for the entire model.
		/// </summary>
		/// <returns>An object array with all the values of this model.</returns>
		public override object[] GetAllValues() {
			return new object[] {
");
 foreach (var column in table.Column) {
	if (column.IsPrimaryKey) {
		 continue;
	} 
            this.Write("\t\t\t\t_");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write(",\r\n");
 } 
            this.Write("\t\t\t};\r\n\t\t}\r\n\r\n\t\t/// <summary>\r\n\t\t/// Returns all the columns in this model.\r\n\t\t//" +
                    "/ </summary>\r\n\t\t/// <returns>A string array with all the columns in this model.<" +
                    "/returns>\r\n\t\tpublic override string[] GetColumns() {\r\n\t\t\treturn new string[] {\r\n" +
                    "");
 foreach (var column in table.Column) { 
	if (column.IsPrimaryKey) {
		 continue;
	} 
            this.Write("\t\t\t\t\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write("\",\r\n");
 } 
            this.Write("\t\t\t};\r\n\t\t}\r\n\r\n");
 if (pk_column != null) { 
            this.Write("\t\t/// <summary>\r\n\t\t/// Gets the name of the model primary key.\r\n\t\t/// </summary>\r" +
                    "\n\t\t/// <returns>The name of the primary key</returns>\r\n\t\tpublic override string " +
                    "GetPKName() {\r\n\t\t\treturn \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(pk_column.Name));
            this.Write("\";\r\n\t\t}\r\n\r\n\t\t/// <summary>\r\n\t\t/// Gets the value of the primary key.\r\n\t\t/// </sum" +
                    "mary>\r\n\t\t/// <returns>The value of the primary key.</returns>\r\n\t\tpublic override" +
                    " object GetPKValue() {\r\n\t\t\treturn _");
            this.Write(this.ToStringHelper.ToStringWithCulture(pk_column.Name));
            this.Write(";\r\n\t\t}\r\n");
 } 
            this.Write("\t}\r\n");
 } 
            this.Write("}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public class CSharpCodeGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
