// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.32989
//    <NameSpace>DtronixModeler.Ddl</NameSpace><Collection>ObservableCollection</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace DtronixModeler.Ddl {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.ObjectModel;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class Database : INotifyPropertyChanged {
        
        private ObservableCollection<Table> tableField;
        
        private ObservableCollection<Association> associationField;
        
        private ObservableCollection<View> viewField;
        
        private ObservableCollection<Function> functionField;
        
        private ObservableCollection<Configuration> configurationField;
        
        private ObservableCollection<Enumeration> enumerationField;
        
        private string nameField;
        
        private string namespaceField;
        
        private string contextClassField;
        
        private bool outputSqlTablesField;
        
        private bool outputCsClassesField;
        
        private bool implementINotifyPropertyChangedField;
        
        private DbProvider targetDbField;
        
        private bool implementProtobufNetDataContractsField;
        
        private static XmlSerializer serializer;
        
        public Database() {
            enumerationField = new ObservableCollection<Enumeration>();
            configurationField = new ObservableCollection<Configuration>();
            functionField = new ObservableCollection<Function>();
            viewField = new ObservableCollection<View>();
            associationField = new ObservableCollection<Association>();
            tableField = new ObservableCollection<Table>();
            outputSqlTablesField = true;
            outputCsClassesField = true;
            implementINotifyPropertyChangedField = false;
            implementProtobufNetDataContractsField = false;
        }
        
        [XmlElementAttribute("Table")]
        public ObservableCollection<Table> Table {
            get {
                return tableField;
            }
            set {
                if ((tableField != null)) {
                    if ((tableField.Equals(value) != true)) {
                        tableField = value;
                        OnPropertyChanged("Table");
                    }
                }
                else {
                    tableField = value;
                    OnPropertyChanged("Table");
                }
            }
        }
        
        [XmlElementAttribute("Association")]
        public ObservableCollection<Association> Association {
            get {
                return associationField;
            }
            set {
                if ((associationField != null)) {
                    if ((associationField.Equals(value) != true)) {
                        associationField = value;
                        OnPropertyChanged("Association");
                    }
                }
                else {
                    associationField = value;
                    OnPropertyChanged("Association");
                }
            }
        }
        
        [XmlElementAttribute("View")]
        public ObservableCollection<View> View {
            get {
                return viewField;
            }
            set {
                if ((viewField != null)) {
                    if ((viewField.Equals(value) != true)) {
                        viewField = value;
                        OnPropertyChanged("View");
                    }
                }
                else {
                    viewField = value;
                    OnPropertyChanged("View");
                }
            }
        }
        
        [XmlElementAttribute("Function")]
        public ObservableCollection<Function> Function {
            get {
                return functionField;
            }
            set {
                if ((functionField != null)) {
                    if ((functionField.Equals(value) != true)) {
                        functionField = value;
                        OnPropertyChanged("Function");
                    }
                }
                else {
                    functionField = value;
                    OnPropertyChanged("Function");
                }
            }
        }
        
        [XmlElementAttribute("Configuration")]
        public ObservableCollection<Configuration> Configuration {
            get {
                return configurationField;
            }
            set {
                if ((configurationField != null)) {
                    if ((configurationField.Equals(value) != true)) {
                        configurationField = value;
                        OnPropertyChanged("Configuration");
                    }
                }
                else {
                    configurationField = value;
                    OnPropertyChanged("Configuration");
                }
            }
        }
        
        [XmlElementAttribute("Enumeration")]
        public ObservableCollection<Enumeration> Enumeration {
            get {
                return enumerationField;
            }
            set {
                if ((enumerationField != null)) {
                    if ((enumerationField.Equals(value) != true)) {
                        enumerationField = value;
                        OnPropertyChanged("Enumeration");
                    }
                }
                else {
                    enumerationField = value;
                    OnPropertyChanged("Enumeration");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Name {
            get {
                return nameField;
            }
            set {
                if ((nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        nameField = value;
                        OnPropertyChanged("Name");
                    }
                }
                else {
                    nameField = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Namespace {
            get {
                return namespaceField;
            }
            set {
                if ((namespaceField != null)) {
                    if ((namespaceField.Equals(value) != true)) {
                        namespaceField = value;
                        OnPropertyChanged("Namespace");
                    }
                }
                else {
                    namespaceField = value;
                    OnPropertyChanged("Namespace");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string ContextClass {
            get {
                return contextClassField;
            }
            set {
                if ((contextClassField != null)) {
                    if ((contextClassField.Equals(value) != true)) {
                        contextClassField = value;
                        OnPropertyChanged("ContextClass");
                    }
                }
                else {
                    contextClassField = value;
                    OnPropertyChanged("ContextClass");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        [DefaultValueAttribute(true)]
        public bool OutputSqlTables {
            get {
                return outputSqlTablesField;
            }
            set {
                if ((outputSqlTablesField.Equals(value) != true)) {
                    outputSqlTablesField = value;
                    OnPropertyChanged("OutputSqlTables");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        [DefaultValueAttribute(true)]
        public bool OutputCsClasses {
            get {
                return outputCsClassesField;
            }
            set {
                if ((outputCsClassesField.Equals(value) != true)) {
                    outputCsClassesField = value;
                    OnPropertyChanged("OutputCsClasses");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        [DefaultValueAttribute(false)]
        public bool ImplementINotifyPropertyChanged {
            get {
                return implementINotifyPropertyChangedField;
            }
            set {
                if ((implementINotifyPropertyChangedField.Equals(value) != true)) {
                    implementINotifyPropertyChangedField = value;
                    OnPropertyChanged("ImplementINotifyPropertyChanged");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public DbProvider TargetDb {
            get {
                return targetDbField;
            }
            set {
                if ((targetDbField.Equals(value) != true)) {
                    targetDbField = value;
                    OnPropertyChanged("TargetDb");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        [DefaultValueAttribute(false)]
        public bool ImplementProtobufNetDataContracts {
            get {
                return implementProtobufNetDataContractsField;
            }
            set {
                if ((implementProtobufNetDataContractsField.Equals(value) != true)) {
                    implementProtobufNetDataContractsField = value;
                    OnPropertyChanged("ImplementProtobufNetDataContracts");
                }
            }
        }
        
        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializer(typeof(Database));
                }
                return serializer;
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if ((handler != null)) {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Database object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Database object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Database object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Database obj, out Exception exception) {
            exception = null;
            obj = default(Database);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Database obj) {
            Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Database Deserialize(string xml) {
            StringReader stringReader = null;
            try {
                stringReader = new StringReader(xml);
                return ((Database)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Database object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Database object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Database object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Database obj, out Exception exception) {
            exception = null;
            obj = default(Database);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Database obj) {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Database LoadFromFile(string fileName) {
            FileStream file = null;
            StreamReader sr = null;
            try {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Database object
        /// </summary>
        public virtual Database Clone() {
            return ((Database)(MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class Table : INotifyPropertyChanged {
        
        private ObservableCollection<Column> columnField;
        
        private ObservableCollection<Index> indexField;
        
        private string customSqlField;
        
        private string nameField;
        
        private string descriptionField;
        
        private bool useCustomSqlField;
        
        private static XmlSerializer serializer;
        
        public Table() {
            indexField = new ObservableCollection<Index>();
            columnField = new ObservableCollection<Column>();
            useCustomSqlField = false;
        }
        
        [XmlElementAttribute("Column")]
        public ObservableCollection<Column> Column {
            get {
                return columnField;
            }
            set {
                if ((columnField != null)) {
                    if ((columnField.Equals(value) != true)) {
                        columnField = value;
                        OnPropertyChanged("Column");
                    }
                }
                else {
                    columnField = value;
                    OnPropertyChanged("Column");
                }
            }
        }
        
        [XmlElementAttribute("Index")]
        public ObservableCollection<Index> Index {
            get {
                return indexField;
            }
            set {
                if ((indexField != null)) {
                    if ((indexField.Equals(value) != true)) {
                        indexField = value;
                        OnPropertyChanged("Index");
                    }
                }
                else {
                    indexField = value;
                    OnPropertyChanged("Index");
                }
            }
        }
        
        public string CustomSql {
            get {
                return customSqlField;
            }
            set {
                if ((customSqlField != null)) {
                    if ((customSqlField.Equals(value) != true)) {
                        customSqlField = value;
                        OnPropertyChanged("CustomSql");
                    }
                }
                else {
                    customSqlField = value;
                    OnPropertyChanged("CustomSql");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Name {
            get {
                return nameField;
            }
            set {
                if ((nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        nameField = value;
                        OnPropertyChanged("Name");
                    }
                }
                else {
                    nameField = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Description {
            get {
                return descriptionField;
            }
            set {
                if ((descriptionField != null)) {
                    if ((descriptionField.Equals(value) != true)) {
                        descriptionField = value;
                        OnPropertyChanged("Description");
                    }
                }
                else {
                    descriptionField = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        [DefaultValueAttribute(false)]
        public bool UseCustomSql {
            get {
                return useCustomSqlField;
            }
            set {
                if ((useCustomSqlField.Equals(value) != true)) {
                    useCustomSqlField = value;
                    OnPropertyChanged("UseCustomSql");
                }
            }
        }
        
        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializer(typeof(Table));
                }
                return serializer;
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if ((handler != null)) {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Table object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Table object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Table object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Table obj, out Exception exception) {
            exception = null;
            obj = default(Table);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Table obj) {
            Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Table Deserialize(string xml) {
            StringReader stringReader = null;
            try {
                stringReader = new StringReader(xml);
                return ((Table)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Table object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Table object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Table object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Table obj, out Exception exception) {
            exception = null;
            obj = default(Table);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Table obj) {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Table LoadFromFile(string fileName) {
            FileStream file = null;
            StreamReader sr = null;
            try {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Table object
        /// </summary>
        public virtual Table Clone() {
            return ((Table)(MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class Column : INotifyPropertyChanged {
        
        private string nameField;
        
        private string defaultValueField;
        
        private string descriptionField;
        
        private string netTypeField;
        
        private string dbTypeField;
        
        private int dbLengthField;
        
        private bool dbLengthFieldSpecified;
        
        private bool isReadOnlyField;
        
        private bool isPrimaryKeyField;
        
        private bool isAutoIncrementField;
        
        private bool nullableField;
        
        private static XmlSerializer serializer;
        
        public Column() {
            isReadOnlyField = false;
            isPrimaryKeyField = false;
            isAutoIncrementField = false;
            nullableField = false;
        }
        
        [XmlAttributeAttribute()]
        public string Name {
            get {
                return nameField;
            }
            set {
                if ((nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        nameField = value;
                        OnPropertyChanged("Name");
                    }
                }
                else {
                    nameField = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string DefaultValue {
            get {
                return defaultValueField;
            }
            set {
                if ((defaultValueField != null)) {
                    if ((defaultValueField.Equals(value) != true)) {
                        defaultValueField = value;
                        OnPropertyChanged("DefaultValue");
                    }
                }
                else {
                    defaultValueField = value;
                    OnPropertyChanged("DefaultValue");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Description {
            get {
                return descriptionField;
            }
            set {
                if ((descriptionField != null)) {
                    if ((descriptionField.Equals(value) != true)) {
                        descriptionField = value;
                        OnPropertyChanged("Description");
                    }
                }
                else {
                    descriptionField = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string NetType {
            get {
                return netTypeField;
            }
            set {
                if ((netTypeField != null)) {
                    if ((netTypeField.Equals(value) != true)) {
                        netTypeField = value;
                        OnPropertyChanged("NetType");
                    }
                }
                else {
                    netTypeField = value;
                    OnPropertyChanged("NetType");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string DbType {
            get {
                return dbTypeField;
            }
            set {
                if ((dbTypeField != null)) {
                    if ((dbTypeField.Equals(value) != true)) {
                        dbTypeField = value;
                        OnPropertyChanged("DbType");
                    }
                }
                else {
                    dbTypeField = value;
                    OnPropertyChanged("DbType");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public int DbLength {
            get {
                return dbLengthField;
            }
            set {
                if ((dbLengthField.Equals(value) != true)) {
                    dbLengthField = value;
                    OnPropertyChanged("DbLength");
                }
            }
        }
        
        [XmlIgnoreAttribute()]
        public bool DbLengthSpecified {
            get {
                return dbLengthFieldSpecified;
            }
            set {
                if ((dbLengthFieldSpecified.Equals(value) != true)) {
                    dbLengthFieldSpecified = value;
                    OnPropertyChanged("DbLengthSpecified");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        [DefaultValueAttribute(false)]
        public bool IsReadOnly {
            get {
                return isReadOnlyField;
            }
            set {
                if ((isReadOnlyField.Equals(value) != true)) {
                    isReadOnlyField = value;
                    OnPropertyChanged("IsReadOnly");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        [DefaultValueAttribute(false)]
        public bool IsPrimaryKey {
            get {
                return isPrimaryKeyField;
            }
            set {
                if ((isPrimaryKeyField.Equals(value) != true)) {
                    isPrimaryKeyField = value;
                    OnPropertyChanged("IsPrimaryKey");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        [DefaultValueAttribute(false)]
        public bool IsAutoIncrement {
            get {
                return isAutoIncrementField;
            }
            set {
                if ((isAutoIncrementField.Equals(value) != true)) {
                    isAutoIncrementField = value;
                    OnPropertyChanged("IsAutoIncrement");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        [DefaultValueAttribute(false)]
        public bool Nullable {
            get {
                return nullableField;
            }
            set {
                if ((nullableField.Equals(value) != true)) {
                    nullableField = value;
                    OnPropertyChanged("Nullable");
                }
            }
        }
        
        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializer(typeof(Column));
                }
                return serializer;
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if ((handler != null)) {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Column object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Column object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Column object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Column obj, out Exception exception) {
            exception = null;
            obj = default(Column);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Column obj) {
            Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Column Deserialize(string xml) {
            StringReader stringReader = null;
            try {
                stringReader = new StringReader(xml);
                return ((Column)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Column object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Column object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Column object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Column obj, out Exception exception) {
            exception = null;
            obj = default(Column);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Column obj) {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Column LoadFromFile(string fileName) {
            FileStream file = null;
            StreamReader sr = null;
            try {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Column object
        /// </summary>
        public virtual Column Clone() {
            return ((Column)(MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class EnumValue : INotifyPropertyChanged {
        
        private string nameField;
        
        private static XmlSerializer serializer;
        
        [XmlAttributeAttribute()]
        public string Name {
            get {
                return nameField;
            }
            set {
                if ((nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        nameField = value;
                        OnPropertyChanged("Name");
                    }
                }
                else {
                    nameField = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializer(typeof(EnumValue));
                }
                return serializer;
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if ((handler != null)) {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EnumValue object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an EnumValue object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output EnumValue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out EnumValue obj, out Exception exception) {
            exception = null;
            obj = default(EnumValue);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out EnumValue obj) {
            Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static EnumValue Deserialize(string xml) {
            StringReader stringReader = null;
            try {
                stringReader = new StringReader(xml);
                return ((EnumValue)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current EnumValue object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an EnumValue object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EnumValue object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out EnumValue obj, out Exception exception) {
            exception = null;
            obj = default(EnumValue);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out EnumValue obj) {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static EnumValue LoadFromFile(string fileName) {
            FileStream file = null;
            StreamReader sr = null;
            try {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this EnumValue object
        /// </summary>
        public virtual EnumValue Clone() {
            return ((EnumValue)(MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class Enumeration : INotifyPropertyChanged {
        
        private ObservableCollection<EnumValue> enumValueField;
        
        private string nameField;
        
        private static XmlSerializer serializer;
        
        public Enumeration() {
            enumValueField = new ObservableCollection<EnumValue>();
        }
        
        [XmlElementAttribute("EnumValue")]
        public ObservableCollection<EnumValue> EnumValue {
            get {
                return enumValueField;
            }
            set {
                if ((enumValueField != null)) {
                    if ((enumValueField.Equals(value) != true)) {
                        enumValueField = value;
                        OnPropertyChanged("EnumValue");
                    }
                }
                else {
                    enumValueField = value;
                    OnPropertyChanged("EnumValue");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Name {
            get {
                return nameField;
            }
            set {
                if ((nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        nameField = value;
                        OnPropertyChanged("Name");
                    }
                }
                else {
                    nameField = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializer(typeof(Enumeration));
                }
                return serializer;
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if ((handler != null)) {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Enumeration object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Enumeration object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Enumeration object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Enumeration obj, out Exception exception) {
            exception = null;
            obj = default(Enumeration);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Enumeration obj) {
            Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Enumeration Deserialize(string xml) {
            StringReader stringReader = null;
            try {
                stringReader = new StringReader(xml);
                return ((Enumeration)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Enumeration object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Enumeration object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Enumeration object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Enumeration obj, out Exception exception) {
            exception = null;
            obj = default(Enumeration);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Enumeration obj) {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Enumeration LoadFromFile(string fileName) {
            FileStream file = null;
            StreamReader sr = null;
            try {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Enumeration object
        /// </summary>
        public virtual Enumeration Clone() {
            return ((Enumeration)(MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class Configuration : INotifyPropertyChanged {
        
        private string nameField;
        
        private string valueField;
        
        private string descriptionField;
        
        private static XmlSerializer serializer;
        
        [XmlAttributeAttribute()]
        public string Name {
            get {
                return nameField;
            }
            set {
                if ((nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        nameField = value;
                        OnPropertyChanged("Name");
                    }
                }
                else {
                    nameField = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Value {
            get {
                return valueField;
            }
            set {
                if ((valueField != null)) {
                    if ((valueField.Equals(value) != true)) {
                        valueField = value;
                        OnPropertyChanged("Value");
                    }
                }
                else {
                    valueField = value;
                    OnPropertyChanged("Value");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Description {
            get {
                return descriptionField;
            }
            set {
                if ((descriptionField != null)) {
                    if ((descriptionField.Equals(value) != true)) {
                        descriptionField = value;
                        OnPropertyChanged("Description");
                    }
                }
                else {
                    descriptionField = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        
        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializer(typeof(Configuration));
                }
                return serializer;
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if ((handler != null)) {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Configuration object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Configuration object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Configuration object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Configuration obj, out Exception exception) {
            exception = null;
            obj = default(Configuration);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Configuration obj) {
            Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Configuration Deserialize(string xml) {
            StringReader stringReader = null;
            try {
                stringReader = new StringReader(xml);
                return ((Configuration)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Configuration object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Configuration object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Configuration object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Configuration obj, out Exception exception) {
            exception = null;
            obj = default(Configuration);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Configuration obj) {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Configuration LoadFromFile(string fileName) {
            FileStream file = null;
            StreamReader sr = null;
            try {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Configuration object
        /// </summary>
        public virtual Configuration Clone() {
            return ((Configuration)(MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class Return : INotifyPropertyChanged {
        
        private string typeField;
        
        private string dbTypeField;
        
        private static XmlSerializer serializer;
        
        [XmlAttributeAttribute()]
        public string Type {
            get {
                return typeField;
            }
            set {
                if ((typeField != null)) {
                    if ((typeField.Equals(value) != true)) {
                        typeField = value;
                        OnPropertyChanged("Type");
                    }
                }
                else {
                    typeField = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string DbType {
            get {
                return dbTypeField;
            }
            set {
                if ((dbTypeField != null)) {
                    if ((dbTypeField.Equals(value) != true)) {
                        dbTypeField = value;
                        OnPropertyChanged("DbType");
                    }
                }
                else {
                    dbTypeField = value;
                    OnPropertyChanged("DbType");
                }
            }
        }
        
        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializer(typeof(Return));
                }
                return serializer;
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if ((handler != null)) {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Return object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Return object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Return object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Return obj, out Exception exception) {
            exception = null;
            obj = default(Return);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Return obj) {
            Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Return Deserialize(string xml) {
            StringReader stringReader = null;
            try {
                stringReader = new StringReader(xml);
                return ((Return)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Return object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Return object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Return object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Return obj, out Exception exception) {
            exception = null;
            obj = default(Return);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Return obj) {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Return LoadFromFile(string fileName) {
            FileStream file = null;
            StreamReader sr = null;
            try {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Return object
        /// </summary>
        public virtual Return Clone() {
            return ((Return)(MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class Parameter : INotifyPropertyChanged {
        
        private string nameField;
        
        private string parameter1Field;
        
        private string typeField;
        
        private string dbTypeField;
        
        private ParameterDirection directionField;
        
        private bool directionFieldSpecified;
        
        private static XmlSerializer serializer;
        
        [XmlAttributeAttribute()]
        public string Name {
            get {
                return nameField;
            }
            set {
                if ((nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        nameField = value;
                        OnPropertyChanged("Name");
                    }
                }
                else {
                    nameField = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        [XmlAttributeAttribute("Parameter")]
        public string Parameter1 {
            get {
                return parameter1Field;
            }
            set {
                if ((parameter1Field != null)) {
                    if ((parameter1Field.Equals(value) != true)) {
                        parameter1Field = value;
                        OnPropertyChanged("Parameter1");
                    }
                }
                else {
                    parameter1Field = value;
                    OnPropertyChanged("Parameter1");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Type {
            get {
                return typeField;
            }
            set {
                if ((typeField != null)) {
                    if ((typeField.Equals(value) != true)) {
                        typeField = value;
                        OnPropertyChanged("Type");
                    }
                }
                else {
                    typeField = value;
                    OnPropertyChanged("Type");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string DbType {
            get {
                return dbTypeField;
            }
            set {
                if ((dbTypeField != null)) {
                    if ((dbTypeField.Equals(value) != true)) {
                        dbTypeField = value;
                        OnPropertyChanged("DbType");
                    }
                }
                else {
                    dbTypeField = value;
                    OnPropertyChanged("DbType");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public ParameterDirection Direction {
            get {
                return directionField;
            }
            set {
                if ((directionField.Equals(value) != true)) {
                    directionField = value;
                    OnPropertyChanged("Direction");
                }
            }
        }
        
        [XmlIgnoreAttribute()]
        public bool DirectionSpecified {
            get {
                return directionFieldSpecified;
            }
            set {
                if ((directionFieldSpecified.Equals(value) != true)) {
                    directionFieldSpecified = value;
                    OnPropertyChanged("DirectionSpecified");
                }
            }
        }
        
        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializer(typeof(Parameter));
                }
                return serializer;
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if ((handler != null)) {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Parameter object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Parameter object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Parameter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Parameter obj, out Exception exception) {
            exception = null;
            obj = default(Parameter);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Parameter obj) {
            Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Parameter Deserialize(string xml) {
            StringReader stringReader = null;
            try {
                stringReader = new StringReader(xml);
                return ((Parameter)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Parameter object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Parameter object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Parameter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Parameter obj, out Exception exception) {
            exception = null;
            obj = default(Parameter);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Parameter obj) {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Parameter LoadFromFile(string fileName) {
            FileStream file = null;
            StreamReader sr = null;
            try {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Parameter object
        /// </summary>
        public virtual Parameter Clone() {
            return ((Parameter)(MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [XmlRootAttribute(Namespace="", IsNullable=false)]
    public enum ParameterDirection {
        
        /// <remarks/>
        In,
        
        /// <remarks/>
        Out,
        
        /// <remarks/>
        InOut,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class Function : INotifyPropertyChanged {
        
        private ObservableCollection<Parameter> parameterField;
        
        private Return itemField;
        
        private string nameField;
        
        private string idField;
        
        private string methodField;
        
        private AccessModifier accessModifierField;
        
        private bool accessModifierFieldSpecified;
        
        private MemberModifier modifierField;
        
        private bool modifierFieldSpecified;
        
        private bool hasMultipleResultsField;
        
        private bool isComposableField;
        
        private static XmlSerializer serializer;
        
        public Function() {
            itemField = new Return();
            parameterField = new ObservableCollection<Parameter>();
            hasMultipleResultsField = false;
            isComposableField = false;
        }
        
        [XmlElementAttribute("Parameter")]
        public ObservableCollection<Parameter> Parameter {
            get {
                return parameterField;
            }
            set {
                if ((parameterField != null)) {
                    if ((parameterField.Equals(value) != true)) {
                        parameterField = value;
                        OnPropertyChanged("Parameter");
                    }
                }
                else {
                    parameterField = value;
                    OnPropertyChanged("Parameter");
                }
            }
        }
        
        [XmlElementAttribute("Return")]
        public Return Item {
            get {
                return itemField;
            }
            set {
                if ((itemField != null)) {
                    if ((itemField.Equals(value) != true)) {
                        itemField = value;
                        OnPropertyChanged("Item");
                    }
                }
                else {
                    itemField = value;
                    OnPropertyChanged("Item");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Name {
            get {
                return nameField;
            }
            set {
                if ((nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        nameField = value;
                        OnPropertyChanged("Name");
                    }
                }
                else {
                    nameField = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        [XmlAttributeAttribute(DataType="ID")]
        public string Id {
            get {
                return idField;
            }
            set {
                if ((idField != null)) {
                    if ((idField.Equals(value) != true)) {
                        idField = value;
                        OnPropertyChanged("Id");
                    }
                }
                else {
                    idField = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Method {
            get {
                return methodField;
            }
            set {
                if ((methodField != null)) {
                    if ((methodField.Equals(value) != true)) {
                        methodField = value;
                        OnPropertyChanged("Method");
                    }
                }
                else {
                    methodField = value;
                    OnPropertyChanged("Method");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public AccessModifier AccessModifier {
            get {
                return accessModifierField;
            }
            set {
                if ((accessModifierField.Equals(value) != true)) {
                    accessModifierField = value;
                    OnPropertyChanged("AccessModifier");
                }
            }
        }
        
        [XmlIgnoreAttribute()]
        public bool AccessModifierSpecified {
            get {
                return accessModifierFieldSpecified;
            }
            set {
                if ((accessModifierFieldSpecified.Equals(value) != true)) {
                    accessModifierFieldSpecified = value;
                    OnPropertyChanged("AccessModifierSpecified");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public MemberModifier Modifier {
            get {
                return modifierField;
            }
            set {
                if ((modifierField.Equals(value) != true)) {
                    modifierField = value;
                    OnPropertyChanged("Modifier");
                }
            }
        }
        
        [XmlIgnoreAttribute()]
        public bool ModifierSpecified {
            get {
                return modifierFieldSpecified;
            }
            set {
                if ((modifierFieldSpecified.Equals(value) != true)) {
                    modifierFieldSpecified = value;
                    OnPropertyChanged("ModifierSpecified");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        [DefaultValueAttribute(false)]
        public bool HasMultipleResults {
            get {
                return hasMultipleResultsField;
            }
            set {
                if ((hasMultipleResultsField.Equals(value) != true)) {
                    hasMultipleResultsField = value;
                    OnPropertyChanged("HasMultipleResults");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        [DefaultValueAttribute(false)]
        public bool IsComposable {
            get {
                return isComposableField;
            }
            set {
                if ((isComposableField.Equals(value) != true)) {
                    isComposableField = value;
                    OnPropertyChanged("IsComposable");
                }
            }
        }
        
        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializer(typeof(Function));
                }
                return serializer;
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if ((handler != null)) {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Function object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Function object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Function object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Function obj, out Exception exception) {
            exception = null;
            obj = default(Function);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Function obj) {
            Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Function Deserialize(string xml) {
            StringReader stringReader = null;
            try {
                stringReader = new StringReader(xml);
                return ((Function)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Function object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Function object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Function object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Function obj, out Exception exception) {
            exception = null;
            obj = default(Function);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Function obj) {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Function LoadFromFile(string fileName) {
            FileStream file = null;
            StreamReader sr = null;
            try {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Function object
        /// </summary>
        public virtual Function Clone() {
            return ((Function)(MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [XmlRootAttribute(Namespace="", IsNullable=false)]
    public enum AccessModifier {
        
        /// <remarks/>
        Public,
        
        /// <remarks/>
        Internal,
        
        /// <remarks/>
        Protected,
        
        /// <remarks/>
        ProtectedInternal,
        
        /// <remarks/>
        Private,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [XmlRootAttribute(Namespace="", IsNullable=false)]
    public enum MemberModifier {
        
        /// <remarks/>
        Virtual,
        
        /// <remarks/>
        Override,
        
        /// <remarks/>
        New,
        
        /// <remarks/>
        NewVirtual,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class View : INotifyPropertyChanged {
        
        private ObservableCollection<Column> columnField;
        
        private string nameField;
        
        private string descriptionField;
        
        private static XmlSerializer serializer;
        
        public View() {
            columnField = new ObservableCollection<Column>();
        }
        
        [XmlElementAttribute("Column")]
        public ObservableCollection<Column> Column {
            get {
                return columnField;
            }
            set {
                if ((columnField != null)) {
                    if ((columnField.Equals(value) != true)) {
                        columnField = value;
                        OnPropertyChanged("Column");
                    }
                }
                else {
                    columnField = value;
                    OnPropertyChanged("Column");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Name {
            get {
                return nameField;
            }
            set {
                if ((nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        nameField = value;
                        OnPropertyChanged("Name");
                    }
                }
                else {
                    nameField = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Description {
            get {
                return descriptionField;
            }
            set {
                if ((descriptionField != null)) {
                    if ((descriptionField.Equals(value) != true)) {
                        descriptionField = value;
                        OnPropertyChanged("Description");
                    }
                }
                else {
                    descriptionField = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        
        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializer(typeof(View));
                }
                return serializer;
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if ((handler != null)) {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current View object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an View object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output View object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out View obj, out Exception exception) {
            exception = null;
            obj = default(View);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out View obj) {
            Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static View Deserialize(string xml) {
            StringReader stringReader = null;
            try {
                stringReader = new StringReader(xml);
                return ((View)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current View object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an View object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output View object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out View obj, out Exception exception) {
            exception = null;
            obj = default(View);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out View obj) {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static View LoadFromFile(string fileName) {
            FileStream file = null;
            StreamReader sr = null;
            try {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this View object
        /// </summary>
        public virtual View Clone() {
            return ((View)(MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class Association : INotifyPropertyChanged {
        
        private string nameField;
        
        private string table1NameField;
        
        private string table1Field;
        
        private string table1ColumnField;
        
        private Cardinality table1CardinalityField;
        
        private string table2NameField;
        
        private string table2Field;
        
        private string table2ColumnField;
        
        private Cardinality table2CardinalityField;
        
        private static XmlSerializer serializer;
        
        [XmlAttributeAttribute()]
        public string Name {
            get {
                return nameField;
            }
            set {
                if ((nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        nameField = value;
                        OnPropertyChanged("Name");
                    }
                }
                else {
                    nameField = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Table1Name {
            get {
                return table1NameField;
            }
            set {
                if ((table1NameField != null)) {
                    if ((table1NameField.Equals(value) != true)) {
                        table1NameField = value;
                        OnPropertyChanged("Table1Name");
                    }
                }
                else {
                    table1NameField = value;
                    OnPropertyChanged("Table1Name");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Table1 {
            get {
                return table1Field;
            }
            set {
                if ((table1Field != null)) {
                    if ((table1Field.Equals(value) != true)) {
                        table1Field = value;
                        OnPropertyChanged("Table1");
                    }
                }
                else {
                    table1Field = value;
                    OnPropertyChanged("Table1");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Table1Column {
            get {
                return table1ColumnField;
            }
            set {
                if ((table1ColumnField != null)) {
                    if ((table1ColumnField.Equals(value) != true)) {
                        table1ColumnField = value;
                        OnPropertyChanged("Table1Column");
                    }
                }
                else {
                    table1ColumnField = value;
                    OnPropertyChanged("Table1Column");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public Cardinality Table1Cardinality {
            get {
                return table1CardinalityField;
            }
            set {
                if ((table1CardinalityField.Equals(value) != true)) {
                    table1CardinalityField = value;
                    OnPropertyChanged("Table1Cardinality");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Table2Name {
            get {
                return table2NameField;
            }
            set {
                if ((table2NameField != null)) {
                    if ((table2NameField.Equals(value) != true)) {
                        table2NameField = value;
                        OnPropertyChanged("Table2Name");
                    }
                }
                else {
                    table2NameField = value;
                    OnPropertyChanged("Table2Name");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Table2 {
            get {
                return table2Field;
            }
            set {
                if ((table2Field != null)) {
                    if ((table2Field.Equals(value) != true)) {
                        table2Field = value;
                        OnPropertyChanged("Table2");
                    }
                }
                else {
                    table2Field = value;
                    OnPropertyChanged("Table2");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Table2Column {
            get {
                return table2ColumnField;
            }
            set {
                if ((table2ColumnField != null)) {
                    if ((table2ColumnField.Equals(value) != true)) {
                        table2ColumnField = value;
                        OnPropertyChanged("Table2Column");
                    }
                }
                else {
                    table2ColumnField = value;
                    OnPropertyChanged("Table2Column");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public Cardinality Table2Cardinality {
            get {
                return table2CardinalityField;
            }
            set {
                if ((table2CardinalityField.Equals(value) != true)) {
                    table2CardinalityField = value;
                    OnPropertyChanged("Table2Cardinality");
                }
            }
        }
        
        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializer(typeof(Association));
                }
                return serializer;
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if ((handler != null)) {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Association object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Association object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Association object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Association obj, out Exception exception) {
            exception = null;
            obj = default(Association);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Association obj) {
            Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Association Deserialize(string xml) {
            StringReader stringReader = null;
            try {
                stringReader = new StringReader(xml);
                return ((Association)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Association object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Association object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Association object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Association obj, out Exception exception) {
            exception = null;
            obj = default(Association);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Association obj) {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Association LoadFromFile(string fileName) {
            FileStream file = null;
            StreamReader sr = null;
            try {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Association object
        /// </summary>
        public virtual Association Clone() {
            return ((Association)(MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [XmlRootAttribute(Namespace="", IsNullable=false)]
    public enum Cardinality {
        
        /// <remarks/>
        One,
        
        /// <remarks/>
        Many,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class IndexColumn : INotifyPropertyChanged {
        
        private string nameField;
        
        private Order directionField;
        
        private static XmlSerializer serializer;
        
        public IndexColumn() {
            directionField = Order.Ascending;
        }
        
        [XmlAttributeAttribute()]
        public string Name {
            get {
                return nameField;
            }
            set {
                if ((nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        nameField = value;
                        OnPropertyChanged("Name");
                    }
                }
                else {
                    nameField = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        [DefaultValueAttribute(Order.Ascending)]
        public Order Direction {
            get {
                return directionField;
            }
            set {
                if ((directionField.Equals(value) != true)) {
                    directionField = value;
                    OnPropertyChanged("Direction");
                }
            }
        }
        
        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializer(typeof(IndexColumn));
                }
                return serializer;
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if ((handler != null)) {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IndexColumn object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an IndexColumn object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IndexColumn object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IndexColumn obj, out Exception exception) {
            exception = null;
            obj = default(IndexColumn);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out IndexColumn obj) {
            Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static IndexColumn Deserialize(string xml) {
            StringReader stringReader = null;
            try {
                stringReader = new StringReader(xml);
                return ((IndexColumn)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current IndexColumn object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an IndexColumn object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IndexColumn object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out IndexColumn obj, out Exception exception) {
            exception = null;
            obj = default(IndexColumn);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out IndexColumn obj) {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static IndexColumn LoadFromFile(string fileName) {
            FileStream file = null;
            StreamReader sr = null;
            try {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this IndexColumn object
        /// </summary>
        public virtual IndexColumn Clone() {
            return ((IndexColumn)(MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [XmlRootAttribute(Namespace="", IsNullable=false)]
    public enum Order {
        
        /// <remarks/>
        Ascending,
        
        /// <remarks/>
        Descending,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [DesignerCategoryAttribute("code")]
    [XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class Index : INotifyPropertyChanged {
        
        private ObservableCollection<IndexColumn> indexColumnField;
        
        private string nameField;
        
        private string descriptionField;
        
        private bool uniqueField;
        
        private static XmlSerializer serializer;
        
        public Index() {
            indexColumnField = new ObservableCollection<IndexColumn>();
            uniqueField = false;
        }
        
        [XmlElementAttribute("IndexColumn")]
        public ObservableCollection<IndexColumn> IndexColumn {
            get {
                return indexColumnField;
            }
            set {
                if ((indexColumnField != null)) {
                    if ((indexColumnField.Equals(value) != true)) {
                        indexColumnField = value;
                        OnPropertyChanged("IndexColumn");
                    }
                }
                else {
                    indexColumnField = value;
                    OnPropertyChanged("IndexColumn");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Name {
            get {
                return nameField;
            }
            set {
                if ((nameField != null)) {
                    if ((nameField.Equals(value) != true)) {
                        nameField = value;
                        OnPropertyChanged("Name");
                    }
                }
                else {
                    nameField = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        public string Description {
            get {
                return descriptionField;
            }
            set {
                if ((descriptionField != null)) {
                    if ((descriptionField.Equals(value) != true)) {
                        descriptionField = value;
                        OnPropertyChanged("Description");
                    }
                }
                else {
                    descriptionField = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        
        [XmlAttributeAttribute()]
        [DefaultValueAttribute(false)]
        public bool Unique {
            get {
                return uniqueField;
            }
            set {
                if ((uniqueField.Equals(value) != true)) {
                    uniqueField = value;
                    OnPropertyChanged("Unique");
                }
            }
        }
        
        private static XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new XmlSerializer(typeof(Index));
                }
                return serializer;
            }
        }
        
        public event PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if ((handler != null)) {
                handler(this, new PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Index object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize() {
            StreamReader streamReader = null;
            MemoryStream memoryStream = null;
            try {
                memoryStream = new MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Index object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Index object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Index obj, out Exception exception) {
            exception = null;
            obj = default(Index);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Index obj) {
            Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Index Deserialize(string xml) {
            StringReader stringReader = null;
            try {
                stringReader = new StringReader(xml);
                return ((Index)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Index object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName);
                return true;
            }
            catch (Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName) {
            StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize();
                FileInfo xmlFile = new FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Index object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Index object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out Index obj, out Exception exception) {
            exception = null;
            obj = default(Index);
            try {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Index obj) {
            Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Index LoadFromFile(string fileName) {
            FileStream file = null;
            StreamReader sr = null;
            try {
                file = new FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this Index object
        /// </summary>
        public virtual Index Clone() {
            return ((Index)(MemberwiseClone()));
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [XmlRootAttribute(Namespace="", IsNullable=false)]
    public enum DbProvider {
        
        /// <remarks/>
        Sqlite,
        
        /// <remarks/>
        MySQL,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [XmlRootAttribute(Namespace="", IsNullable=false)]
    public enum ClassModifier {
        
        /// <remarks/>
        Sealed,
        
        /// <remarks/>
        Abstract,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.32990")]
    [SerializableAttribute()]
    [XmlRootAttribute(Namespace="", IsNullable=false)]
    public enum ColumnReservedWords {
        
        /// <remarks/>
        ABORT,
        
        /// <remarks/>
        ACTION,
        
        /// <remarks/>
        ADD,
        
        /// <remarks/>
        AFTER,
        
        /// <remarks/>
        ALL,
        
        /// <remarks/>
        ALTER,
        
        /// <remarks/>
        ANALYZE,
        
        /// <remarks/>
        AND,
        
        /// <remarks/>
        AS,
        
        /// <remarks/>
        ASC,
        
        /// <remarks/>
        ATTACH,
        
        /// <remarks/>
        AUTOINCREMENT,
        
        /// <remarks/>
        BEFORE,
        
        /// <remarks/>
        BEGIN,
        
        /// <remarks/>
        BETWEEN,
        
        /// <remarks/>
        BY,
        
        /// <remarks/>
        CASCADE,
        
        /// <remarks/>
        CASE,
        
        /// <remarks/>
        CAST,
        
        /// <remarks/>
        CHECK,
        
        /// <remarks/>
        COLLATE,
        
        /// <remarks/>
        COLUMN,
        
        /// <remarks/>
        COMMIT,
        
        /// <remarks/>
        CONFLICT,
        
        /// <remarks/>
        CONSTRAINT,
        
        /// <remarks/>
        CREATE,
        
        /// <remarks/>
        CROSS,
        
        /// <remarks/>
        CURRENT_DATE,
        
        /// <remarks/>
        CURRENT_TIME,
        
        /// <remarks/>
        CURRENT_TIMESTAMP,
        
        /// <remarks/>
        DATABASE,
        
        /// <remarks/>
        DEFAULT,
        
        /// <remarks/>
        DEFERRABLE,
        
        /// <remarks/>
        DEFERRED,
        
        /// <remarks/>
        DELETE,
        
        /// <remarks/>
        DESC,
        
        /// <remarks/>
        DETACH,
        
        /// <remarks/>
        DISTINCT,
        
        /// <remarks/>
        DROP,
        
        /// <remarks/>
        EACH,
        
        /// <remarks/>
        ELSE,
        
        /// <remarks/>
        END,
        
        /// <remarks/>
        ESCAPE,
        
        /// <remarks/>
        EXCEPT,
        
        /// <remarks/>
        EXCLUSIVE,
        
        /// <remarks/>
        EXISTS,
        
        /// <remarks/>
        EXPLAIN,
        
        /// <remarks/>
        FAIL,
        
        /// <remarks/>
        FOR,
        
        /// <remarks/>
        FOREIGN,
        
        /// <remarks/>
        FROM,
        
        /// <remarks/>
        FULL,
        
        /// <remarks/>
        GLOB,
        
        /// <remarks/>
        GROUP,
        
        /// <remarks/>
        HAVING,
        
        /// <remarks/>
        IF,
        
        /// <remarks/>
        IGNORE,
        
        /// <remarks/>
        IMMEDIATE,
        
        /// <remarks/>
        IN,
        
        /// <remarks/>
        INDEX,
        
        /// <remarks/>
        INDEXED,
        
        /// <remarks/>
        INITIALLY,
        
        /// <remarks/>
        INNER,
        
        /// <remarks/>
        INSERT,
        
        /// <remarks/>
        INSTEAD,
        
        /// <remarks/>
        INTERSECT,
        
        /// <remarks/>
        INTO,
        
        /// <remarks/>
        IS,
        
        /// <remarks/>
        ISNULL,
        
        /// <remarks/>
        JOIN,
        
        /// <remarks/>
        KEY,
        
        /// <remarks/>
        LEFT,
        
        /// <remarks/>
        LIKE,
        
        /// <remarks/>
        LIMIT,
        
        /// <remarks/>
        MATCH,
        
        /// <remarks/>
        NATURAL,
        
        /// <remarks/>
        NO,
        
        /// <remarks/>
        NOT,
        
        /// <remarks/>
        NOTNULL,
        
        /// <remarks/>
        NULL,
        
        /// <remarks/>
        OF,
        
        /// <remarks/>
        OFFSET,
        
        /// <remarks/>
        ON,
        
        /// <remarks/>
        OR,
        
        /// <remarks/>
        ORDER,
        
        /// <remarks/>
        OUTER,
        
        /// <remarks/>
        PLAN,
        
        /// <remarks/>
        PRAGMA,
        
        /// <remarks/>
        PRIMARY,
        
        /// <remarks/>
        QUERY,
        
        /// <remarks/>
        RAISE,
        
        /// <remarks/>
        RECURSIVE,
        
        /// <remarks/>
        REFERENCES,
        
        /// <remarks/>
        REGEXP,
        
        /// <remarks/>
        REINDEX,
        
        /// <remarks/>
        RELEASE,
        
        /// <remarks/>
        RENAME,
        
        /// <remarks/>
        REPLACE,
        
        /// <remarks/>
        RESTRICT,
        
        /// <remarks/>
        RIGHT,
        
        /// <remarks/>
        ROLLBACK,
        
        /// <remarks/>
        ROW,
        
        /// <remarks/>
        SAVEPOINT,
        
        /// <remarks/>
        SELECT,
        
        /// <remarks/>
        SET,
        
        /// <remarks/>
        TABLE,
        
        /// <remarks/>
        TEMP,
        
        /// <remarks/>
        TEMPORARY,
        
        /// <remarks/>
        THEN,
        
        /// <remarks/>
        TO,
        
        /// <remarks/>
        TRANSACTION,
        
        /// <remarks/>
        TRIGGER,
        
        /// <remarks/>
        UNION,
        
        /// <remarks/>
        UNIQUE,
        
        /// <remarks/>
        UPDATE,
        
        /// <remarks/>
        USING,
        
        /// <remarks/>
        VACUUM,
        
        /// <remarks/>
        VALUES,
        
        /// <remarks/>
        VIEW,
        
        /// <remarks/>
        VIRTUAL,
        
        /// <remarks/>
        WHEN,
        
        /// <remarks/>
        WHERE,
        
        /// <remarks/>
        WITH,
        
        /// <remarks/>
        WITHOUT,
    }
}
