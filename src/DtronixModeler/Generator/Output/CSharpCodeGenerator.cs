// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DtronixModeler.Generator.Output
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using DtronixModeler.Ddl;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class CSharpCodeGenerator : CSharpCodeGeneratorBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
 
string[] reserved_words = new string[] {"for", "with", "while"};

            this.Write("using System;\r\nusing System.Data.Common;\r\nusing System.Collections.Generic;\r\nusin" +
                    "g System.Collections;\r\nusing DtronixModel;\r\n\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.database.Namespace));
            this.Write(" {\r\n\r\n");
 foreach (var enum_class in database.Enumeration) { 
            this.Write("    public enum ");
            this.Write(this.ToStringHelper.ToStringWithCulture(enum_class.Name));
            this.Write(" : int {\r\n");
 
int shift_ammount = 0;
foreach (var enum_value in enum_class.EnumValue) { 
            this.Write("        ");
            this.Write(this.ToStringHelper.ToStringWithCulture(enum_value.Name));
            this.Write(" = 1 << ");
            this.Write(this.ToStringHelper.ToStringWithCulture(shift_ammount++));
            this.Write(",\r\n");
 } 
            this.Write("    }\r\n");
 } 
            this.Write("\r\n    public partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.database.ContextClass));
            this.Write(" : Context {\r\n\r\n        private static Func<DbConnection> _defaultConnection;\r\n\r\n" +
                    "        /// <summary>\r\n        /// Set a default constructor to allow use of par" +
                    "ameter-less context calling.\r\n        /// </summary>\r\n        public static Func" +
                    "<DbConnection> DefaultConnection\r\n        {\r\n            get { return _defaultCo" +
                    "nnection; }\r\n            set { _defaultConnection = value; }\r\n        }\r\n\r\n     " +
                    "   private static string _lastInsertIdQuery = null;\r\n\r\n        /// <summary>\r\n  " +
                    "      /// Sets the query string to retrieve the last insert ID.\r\n        /// </s" +
                    "ummary>\r\n        public new static string LastInsertIdQuery\r\n        {\r\n        " +
                    "    get { return _lastInsertIdQuery; }\r\n            set { _lastInsertIdQuery = v" +
                    "alue; }\r\n        }\r\n\r\n        private static TargetDb _DatabaseType;\r\n\r\n        " +
                    "/// <summary>\r\n        /// Type of database this context will target.  Automatic" +
                    "ally sets proper database specific values.\r\n        /// </summary>\r\n        publ" +
                    "ic static TargetDb DatabaseType\r\n        {\r\n            get { return _DatabaseTy" +
                    "pe; }\r\n            set \r\n            {\r\n                _DatabaseType = value;\r\n" +
                    "                switch (value) \r\n                {\r\n                    case Tar" +
                    "getDb.MySql:\r\n                        LastInsertIdQuery = \"SELECT last_insert_id" +
                    "()\";\r\n                        break;\r\n                    case TargetDb.Sqlite:\r" +
                    "\n                        LastInsertIdQuery = \"SELECT last_insert_rowid()\";\r\n    " +
                    "                    break;\r\n                    case TargetDb.Other:\r\n          " +
                    "              break;\r\n                }\r\n            }\r\n        }\r\n");
 foreach (var table in database.Table) { 
            this.Write("        private Table<");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write("> _");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(";\r\n\r\n        public Table<");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write("> ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" {\r\n            get {\r\n                if (_");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" == null) {\r\n                    _");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" = new Table<");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(">(this);\r\n                }\r\n\r\n                return _");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(";\r\n            }\r\n        }\r\n\r\n");
 } 
            this.Write("        /// <summary>\r\n        /// Create a new context of this database\'s type. " +
                    " Can only be used if a default connection is specified.\r\n        /// </summary>\r" +
                    "\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.database.ContextClass));
            this.Write(@"() : base(_defaultConnection, _lastInsertIdQuery) { }

        /// <summary>
        /// Create a new context of this database's type with a specific connection.
        /// </summary>
        /// <param name=""connection"">Existing open database connection to use.</param>
        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(this.database.ContextClass));
            this.Write(@"(DbConnection connection) : base(connection, _lastInsertIdQuery) { }
        
        /// <summary>
        /// Sets the default connection creation method.
        /// </summary>
        /// <param name=""defaultConnection"">Method to be called on each context creation and return the new connection.</param>
        /// <param name=""targetDb"">Type of DB this is connecting to.</param>
        public override void SetDefaultConnection(Func<DbConnection> defaultConnection, TargetDb targetDb)
        {
           DefaultConnection = defaultConnection;
           DatabaseType = targetDb;
        }
    }
");
 foreach (var table in database.Table) { 
    Column pk_column = null;

    foreach (var column in table.Column) {
        if (pk_column == null && column.IsPrimaryKey) {
            pk_column = column;
        }
    } 
            this.Write("\r\n    [Table(Name = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write("\")]\r\n");
 if (this.database.ImplementProtobufNetDataContracts) { 
            this.Write("    [ProtoBuf.ProtoContract]\r\n");
 } 
            this.Write("    public partial class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" : TableRow");
 if(this.database.ImplementINotifyPropertyChanged){ 
            this.Write(", System.ComponentModel.INotifyPropertyChanged");
 } 
            this.Write(" {\r\n\r\n");
 if(this.database.ImplementINotifyPropertyChanged){ 
            this.Write("        /// <summary>\r\n        /// Implementation for INotifyPropertyChanged.\r\n  " +
                    "      /// </summary>\r\n        public event System.ComponentModel.PropertyChanged" +
                    "EventHandler PropertyChanged;\r\n");
 } 
            this.Write("        \r\n");
 for(int i = 0; i < table.Column.Count(); i++) { 
            this.Write("        /// <summary>\r\n        /// Column name.\r\n");
 if (string.IsNullOrWhiteSpace(table.Column[i].Description) == false) { 
            this.Write("        /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Description));
            this.Write("\r\n");
 } 
            this.Write("        /// </summary>\r\n        public const string ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write("Column = \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write("\";\r\n\r\n        /// <summary>\r\n        /// Backing field for the ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(" property.\r\n        /// </summary>\r\n        private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ColumnNetType(table.Column[i])));
            this.Write(" _");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(";\r\n\r\n");
 if (string.IsNullOrWhiteSpace(table.Column[i].Description) == false) { 
            this.Write("        /// <summary>\r\n        /// ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Description));
            this.Write("\r\n        /// </summary>\r\n");
 }
if (this.database.ImplementProtobufNetDataContracts) { 
            this.Write("        [ProtoBuf.ProtoMember(");
            this.Write(this.ToStringHelper.ToStringWithCulture(i+1));
            this.Write(")]\r\n");
 } 
            this.Write("        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ColumnNetType(table.Column[i])));
            this.Write(" ");
 if(reserved_words.Contains(table.Column[i].Name)){ this.Write("@"); } 
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write("\r\n        {\r\n            get { return _");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write("; }\r\n");
 if (table.Column[i].IsReadOnly == false || this.database.ImplementProtobufNetDataContracts) { 
            this.Write("            ");
 if(this.database.ImplementProtobufNetDataContracts && table.Column[i].IsReadOnly) { 
            this.Write("private ");
 } 
            this.Write("set\r\n            {\r\n");
 if (table.Column[i].DbLength != 0 && table.Column[i].NetType == "String") { 
            this.Write("                if(value != null && value.Length > ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].DbLength));
            this.Write(") \r\n                    throw new ArgumentOutOfRangeException(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write("\", \"String ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(" is too long. Max length allowed is ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].DbLength));
            this.Write(" characters. Passed string is \" + value.Length.ToString() + \" characters.\");\r\n");
 } 
            this.Write("                _");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(" = value;\r\n                ChangedFlags.Set(");
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            this.Write(", true);\r\n");
 if(this.database.ImplementINotifyPropertyChanged){ 
            this.Write("                PropertyChanged?.Invoke(this, new System.ComponentModel.PropertyC" +
                    "hangedEventArgs(nameof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(")));\r\n");
 } 
            this.Write("            }\r\n");
 } 
            this.Write("        }\r\n\r\n");
 } 
 
foreach (var db_assoc in database.Association) {
    var reference = db_assoc.ReferencesTable(table);
    var assoc = new AssociationCodeGenerator();

    if (reference == Association.Reference.R1) {
        assoc.ThisAssociationName = db_assoc.Table1Name;
        assoc.ThisColumn = db_assoc.GetReferenceColumn(database, Association.Reference.R1);
        assoc.ThisTable = table;
        assoc.ThisCardinality = db_assoc.Table1Cardinality;

        assoc.OtherAssociationName = db_assoc.Table2Name;
        assoc.OtherColumn = db_assoc.GetReferenceColumn(database, Association.Reference.R2);
        assoc.OtherTable = database.Table.Single(t => t.Name == db_assoc.Table2);
        assoc.OtherCardinality = db_assoc.Table2Cardinality;
                    

    } else if (reference == Association.Reference.R2) {
        assoc.ThisAssociationName = db_assoc.Table2Name;
        assoc.ThisColumn = db_assoc.GetReferenceColumn(database, Association.Reference.R2);
        assoc.ThisTable = table;
        assoc.ThisCardinality = db_assoc.Table2Cardinality;

        assoc.OtherAssociationName = db_assoc.Table1Name;
        assoc.OtherColumn = db_assoc.GetReferenceColumn(database, Association.Reference.R1);
        assoc.OtherTable = database.Table.Single(t => t.Name == db_assoc.Table1);
        assoc.OtherCardinality = db_assoc.Table1Cardinality;

    } else {
        continue;
    }

    string field_type = assoc.OtherTable.Name;
    if (assoc.OtherCardinality == Cardinality.Many) {
        field_type += "[]";
    } 
    string fetch_type;

    if (assoc.OtherCardinality == Cardinality.Many) {
        fetch_type = "ExecuteFetchAll();";
    } else {
        fetch_type = "ExecuteFetch();";
    } 
            this.Write("        private ");
            this.Write(this.ToStringHelper.ToStringWithCulture(field_type));
            this.Write(" _");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherAssociationName));
            this.Write(";\r\n\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(field_type));
            this.Write(" ");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherAssociationName));
            this.Write("\r\n        {\r\n            get \r\n            {\r\n                if (_");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherAssociationName));
            this.Write(" != null)\r\n                    return _");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherAssociationName));
            this.Write(";\r\n                \r\n                try \r\n                {\r\n                   " +
                    " _");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherAssociationName));
            this.Write(" = ((");
            this.Write(this.ToStringHelper.ToStringWithCulture(database.ContextClass));
            this.Write(")Context).");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherTable.Name));
            this.Write(".Select().Where(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherColumn.Name));
            this.Write(" = {0}\", _");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.ThisColumn.Name));
            this.Write(").");
            this.Write(this.ToStringHelper.ToStringWithCulture(fetch_type));
            this.Write(@"
                }
                catch 
                {
                    //Accessing a property outside of its database context is not allowed.  Access an association inside the database context to cache the values for later use.
                    _");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherAssociationName));
            this.Write(" = null;\r\n                }\r\n                return _");
            this.Write(this.ToStringHelper.ToStringWithCulture(assoc.OtherAssociationName));
            this.Write(";\r\n            }\r\n        }\r\n        \r\n");
 } 
            this.Write("        /// <summary>\r\n        /// Clones a ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" row.\r\n        /// </summary>\r\n        /// <param name=\"source\">Source ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" row to clone from.</param>\r\n        /// <param name=\"onlyChanged\">True to only c" +
                    "lone the changes from the source. False to clone all the values regardless of ch" +
                    "anged or unchanged.</param>\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" source, bool onlyChanged = false)\r\n        { \r\n");
 for(int i = 0; i < table.Column.Count(); i++) { 
            if (table.Column[i].IsPrimaryKey) { 
            this.Write("            _");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(" = source._");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(";\r\n");
 } 
            this.Write("            if (onlyChanged == false || source.ChangedFlags.Get(");
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            this.Write("))\r\n                _");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(" = source._");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(";\r\n");
 } 
            this.Write("            ChangedFlags = new BitArray(source.ChangedFlags);\r\n        }\r\n       " +
                    " \r\n        /// <summary>\r\n        /// Creates a empty ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" row. Use this for creating a new row and inserting into the database.\r\n        /" +
                    "// </summary>\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write("() : this(null, null) { }\r\n\r\n        /// <summary>\r\n        /// Creates a ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(@" row and reads the row information from the table into this row.
        /// </summary>
        /// <param name=""reader"">Instance of a live data reader for this row's table.</param>
        /// <param name=""context"">The current context of the database.</param>
        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write("(DbDataReader reader, Context context)\r\n        {\r\n            ChangedFlags = new" +
                    " BitArray(");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column.Count()));
            this.Write(");\r\n            Read(reader, context);\r\n        }\r\n\r\n");
 var primary_key = table.Column.FirstOrDefault(c => c.IsPrimaryKey);
if(primary_key != null){ 
            this.Write("        /// <summary>\r\n        /// Creates a ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write(" row and with the specified Id.\r\n        /// Useful when creating a new matching " +
                    "row on a remote connection.\r\n        /// </summary>\r\n        /// <param name=\"id" +
                    "\">Id to set the row to.</param>\r\n        public ");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Name));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(ColumnNetType(primary_key)));
            this.Write(" id)\r\n        {\r\n            ChangedFlags = new BitArray(");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column.Count()));
            this.Write(");\r\n            _");
            this.Write(this.ToStringHelper.ToStringWithCulture(primary_key.Name));
            this.Write(" = id;\r\n        }\r\n");
 } 
            this.Write(@"
        /// <summary>
        /// Reads the row information from the table into this row.
        /// </summary>
        /// <param name=""reader"">Instance of a live data reader for this row's table.</param>
        /// <param name=""context"">The current context of the database.</param>
        public override void Read(DbDataReader reader, Context context) {
            Context = context;
            if (reader == null)
                return;

            var length = reader.FieldCount;
            for (var i = 0; i < length; i++)
            {
                switch (reader.GetName(i))
                {
");
 foreach (var column in table.Column) {
        string type = ColumnNetType(column);
        string reader_get = column.NetType;

        if(reader_get == "DateTimeOffset")
            reader_get = "DateTime";

        if (this.database.Enumeration.Any(en => en.Name == column.NetType)) { 
            this.Write("                    case \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write("\":\r\n                        _");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write(" = (");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.NetType));
            this.Write(")reader.GetInt32(i);\r\n                        break;\r\n");
 } else if (column.NetType == "ByteArray") { 
            this.Write("                    case \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write("\":\r\n                        _");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write(" = reader.IsDBNull(i) ? null : reader.GetFieldValue<byte[]>(i);\r\n                " +
                    "        break;\r\n");
 } else if (column.NetType.StartsWith("UInt")) { 
            this.Write("                    case \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write("\":\r\n                        _");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write(" = reader.IsDBNull(i) ? default(");
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            this.Write(") : (");
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Replace("?", "")));
            this.Write(")(long)reader.GetValue(i);\r\n                        break;\r\n");
 } else if (column.Nullable) { 
            this.Write("                    case \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write("\":\r\n                        _");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write(" = reader.IsDBNull(i) ? default(");
            this.Write(this.ToStringHelper.ToStringWithCulture(type));
            this.Write(") : reader.Get");
            this.Write(this.ToStringHelper.ToStringWithCulture(reader_get));
            this.Write("(i);\r\n                        break;\r\n");
 } else if (column.NetType == "String") { 
            this.Write("                    case \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write("\":\r\n                        _");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write(" = reader.GetValue(i) as string;\r\n                        break;\r\n");
 } else { 
            this.Write("                    case \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write("\":\r\n                        _");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write(" = reader.Get");
            this.Write(this.ToStringHelper.ToStringWithCulture(reader_get));
            this.Write("(i);\r\n                        break;\r\n");
 } 
 } 
            this.Write(@"                    default: 
                        if(AdditionalValues == null)
                            AdditionalValues = new Dictionary<string, object>();

                        AdditionalValues.Add(reader.GetName(i), reader.GetValue(i)); 
                        break;
                }
            }
        }

        /// <summary>
        /// Gets all the instance values in the row which have been changed.
        /// </summary>
        /// <returns>Dictionary with the keys of the column names and values of the properties.</returns>
        public override Dictionary<string, object> GetChangedValues()
        {
            var changed = new Dictionary<string, object>();
");
 for(int i = 0; i < table.Column.Count(); i++) { 
    if (table.Column[i].IsPrimaryKey) {
         continue;
    } 
            this.Write("            if (ChangedFlags.Get(");
            this.Write(this.ToStringHelper.ToStringWithCulture(i));
            this.Write("))\r\n                changed.Add(\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write("\", _");
            this.Write(this.ToStringHelper.ToStringWithCulture(table.Column[i].Name));
            this.Write(");\r\n");
 } 
            this.Write(@"
            return changed;
        }

        /// <summary>
        /// Return all the instance values for the entire row.
        /// </summary>
        /// <returns>An object array with all the values of this row.</returns>
        public override object[] GetAllValues()
        {
            return new object[] {
");
 foreach (var column in table.Column){
    if (column.IsPrimaryKey) {
         continue;
    } 
            this.Write("                _");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write(",\r\n");
 } 
            this.Write(@"            };
        }

        /// <summary>
        /// Returns all the columns in this row.
        /// </summary>
        /// <returns>A string array with all the columns in this row.</returns>
        public override string[] GetColumns()
        {
            return new [] {
");
 foreach (var column in table.Column) { 
    if (column.IsPrimaryKey) {
         continue;
    } 
            this.Write("                \"");
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            this.Write("\",\r\n");
 } 
            this.Write(@"            };
        }

        /// <summary>
        /// Returns all the columns types.
        /// </summary>
        /// <returns>A type array with all the columns in this row.</returns>
        public override Type[] GetColumnTypes()
        {
            return new [] {
");
 foreach (var column in table.Column) { 
    if (column.IsPrimaryKey) {
         continue;
    } 
            this.Write("                typeof(");
            this.Write(this.ToStringHelper.ToStringWithCulture(ColumnNetType(column)));
            this.Write("),\r\n");
 } 
            this.Write(@"            };
        }

        /// <summary>
        /// Gets the name of the row primary key.
        /// </summary>
        /// <returns>The name of the primary key</returns>
        public override string GetPKName()
        {
            return ");
 if(pk_column == null) { 
            this.Write("null;");
 } else { 
            this.Write("\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(pk_column.Name));
            this.Write("\";");
 } 
            this.Write(" \r\n        }\r\n\r\n        /// <summary>\r\n        /// Gets the value of the primary " +
                    "key.\r\n        /// </summary>\r\n        /// <returns>The value of the primary key." +
                    "</returns>\r\n        public override object GetPKValue()\r\n        {\r\n            " +
                    "return ");
 if(pk_column == null) { 
            this.Write("null;");
 } else { 
            this.Write("_");
            this.Write(this.ToStringHelper.ToStringWithCulture(pk_column.Name));
            this.Write(";");
 } 
            this.Write(" \r\n        }\r\n    }\r\n");
 } 
            this.Write("}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class CSharpCodeGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
