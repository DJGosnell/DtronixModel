<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="DtxModelGen.Schema.Dbml.Table" name="db_table" #>
<#@ parameter type="System.String" name="namespace" #>
<#@ parameter type="DtxModelGen.TypeTransformer" name="type_transformer" #>

using System.Collections.Generic;
using DtxModel;
using System.Data.Common;

namespace <#= namespace #> {

	
	[ColumnAttribute(Name = "rowid", Storage = "_rowid", IsDbGenerated = true, IsPrimaryKey = true)]
	[ColumnAttribute(Name = "CustomerID", Storage = "_CustomerID")]
	[ColumnAttribute(Name = "CompanyName", Storage = "_CompanyName")]
	[ColumnAttribute(Name = "ContactName", Storage = "_ContactName")]
	[ColumnAttribute(Name = "Address", Storage = "_Address")]
	[ColumnAttribute(Name = "City", Storage = "_City")]
	[ColumnAttribute(Name = "Region", Storage = "_Region")]
	[ColumnAttribute(Name = "PostalCode", Storage = "_PostalCode")]
	[ColumnAttribute(Name = "Fax", Storage = "_Fax")]
	[ColumnAttribute(Name = "Phone", Storage = "_Phone")]
	[ColumnAttribute(Name = "Country", Storage = "_Country")]
	public class <#= db_table.Name #> : Model {

<# foreach(var item in db_table.Type.Items) { 
	if(item is DtxModelGen.Schema.Dbml.Association){
		continue;
	}
	bool read_only = false;
	DtxModelGen.Schema.Dbml.Column column = item as DtxModelGen.Schema.Dbml.Column;

	if(column.IsDbGeneratedSpecified && column.IsDbGenerated) {
		read_only = true;
	}

	if(read_only == false) { #>
		private bool _<#= column.Name #>Changed = false;
<#	} #>
		private <#= column.Type #> _<#= column.Name #>;

		public <#= column.Type #> <#= column.Name #> {
<#	if(read_only == false) { #>
			get { return _<#= column.Name #>; }
<#	} #>
			set {
				_<#= column.Name #> = value;
				_<#= column.Name #>Changed = true;
			}
		}
<# } #>



		public Customers() : this(null, null) { }

		public Customers(DbDataReader reader, DbConnection connection) {
			read(reader, connection);
		}


		public override void read(DbDataReader reader, DbConnection connection) {
			this.connection = connection;
			if (reader == null) {
				return;
			}

			int length = reader.FieldCount;
			for (int i = 0; i < length; i++) {
				switch (reader.GetName(i)) {
					case "rowid": _rowid = (long)reader.GetValue(i); break;
					case "CustomerID": _CustomerID = reader.GetValue(i) as string; break;
					case "CompanyName": _CompanyName = reader.GetValue(i) as string; break;
					case "ContactName": _ContactName = reader.GetValue(i) as string; break;
					case "Address": _Address = reader.GetValue(i) as string; break;
					case "City": _City = reader.GetValue(i) as string; break;
					case "Region": _Region = reader.GetValue(i) as string; break;
					case "PostalCode": _PostalCode = reader.GetValue(i) as string; break;
					case "Country": _Country = reader.GetValue(i) as string; break;
					case "Phone": _Phone = reader.GetValue(i) as string; break;
					case "Fax": _Fax = reader.GetValue(i) as string; break;
					default: break;
				}
			}
		}

		public override Dictionary<string, object> getChangedValues() {
			var changed = new Dictionary<string, object>();
			if (_CustomerIDChanged)
				changed.Add("CustomerID", _CustomerID);
			if (_CompanyNameChanged)
				changed.Add("CompanyName", _CompanyName);
			if (_ContactNameChanged)
				changed.Add("ContactName", _ContactName);
			if (_AddressChanged)
				changed.Add("Address", _Address);
			if (_CityChanged)
				changed.Add("City", _City);
			if (_RegionChanged)
				changed.Add("Region", _Region);
			if (_PostalCodeChanged)
				changed.Add("PostalCode", _PostalCode);
			if (_CountryChanged)
				changed.Add("Country", _Country);
			if (_PhoneChanged)
				changed.Add("Phone", _Phone);
			if (_FaxChanged)
				changed.Add("Fax", _Fax);

			return changed;
		}

		public override object[] getAllValues() {
			return new object[] {
				_CustomerID,
				_CompanyName,
				_ContactName,
				_Address,
				_City,
				_Region,
				_PostalCode,
				_Country,
				_Phone,
				_Fax
			};
		}

		public override string[] getColumns() {
			return new string[] {
				"CustomerID",
				"CompanyName",
				"ContactName",
				"Address",
				"City",
				"Region",
				"PostalCode",
				"Country",
				"Phone",
				"Fax",
			};
		}

		public override string getPKName() {
			return "rowid";
		}

		public override object getPKValue() {
			return _rowid;
		}
	}
}