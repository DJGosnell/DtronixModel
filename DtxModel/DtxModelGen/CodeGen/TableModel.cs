// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DtxModelGen.CodeGen
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class TableModel : TableModelBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\nusing System.Collections.Generic;\r\nusing DtxModel;\r\nusing System.Data.Common;\r\n" +
                    "\r\nnamespace ");
            
            #line 14 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(@namespace));
            
            #line default
            #line hidden
            this.Write(@" {

	
	[ColumnAttribute(Name = ""rowid"", Storage = ""_rowid"", IsDbGenerated = true, IsPrimaryKey = true)]
	[ColumnAttribute(Name = ""CustomerID"", Storage = ""_CustomerID"")]
	[ColumnAttribute(Name = ""CompanyName"", Storage = ""_CompanyName"")]
	[ColumnAttribute(Name = ""ContactName"", Storage = ""_ContactName"")]
	[ColumnAttribute(Name = ""Address"", Storage = ""_Address"")]
	[ColumnAttribute(Name = ""City"", Storage = ""_City"")]
	[ColumnAttribute(Name = ""Region"", Storage = ""_Region"")]
	[ColumnAttribute(Name = ""PostalCode"", Storage = ""_PostalCode"")]
	[ColumnAttribute(Name = ""Fax"", Storage = ""_Fax"")]
	[ColumnAttribute(Name = ""Phone"", Storage = ""_Phone"")]
	[ColumnAttribute(Name = ""Country"", Storage = ""_Country"")]
	public class ");
            
            #line 28 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(db_table.Name));
            
            #line default
            #line hidden
            this.Write(" : Model {\r\n\r\n");
            
            #line 30 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
 foreach(var item in db_table.Type.Items) { 
	if(item is DtxModelGen.Schema.Dbml.Association){
		continue;
	}
	bool read_only = false;
	DtxModelGen.Schema.Dbml.Column column = item as DtxModelGen.Schema.Dbml.Column;

	if(column.IsDbGeneratedSpecified && column.IsDbGenerated) {
		read_only = true;
	}

	if(read_only == false) { 
            
            #line default
            #line hidden
            this.Write("\t\tprivate bool _");
            
            #line 42 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write("Changed = false;\r\n");
            
            #line 43 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
	} 
            
            #line default
            #line hidden
            this.Write("\t\tprivate ");
            
            #line 44 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Type));
            
            #line default
            #line hidden
            this.Write(" _");
            
            #line 44 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n\t\tpublic ");
            
            #line 46 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Type));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 46 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 47 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
	if(read_only == false) { 
            
            #line default
            #line hidden
            this.Write("\t\t\tget { return _");
            
            #line 48 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write("; }\r\n");
            
            #line 49 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
	} 
            
            #line default
            #line hidden
            this.Write("\t\t\tset {\r\n\t\t\t\t_");
            
            #line 51 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write(" = value;\r\n\t\t\t\t_");
            
            #line 52 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(column.Name));
            
            #line default
            #line hidden
            this.Write("Changed = true;\r\n\t\t\t}\r\n\t\t}\r\n");
            
            #line 55 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\r\n\t\tpublic Customers() : this(null, null) { }\r\n\r\n\t\tpublic Customers(DbDataRea" +
                    "der reader, DbConnection connection) {\r\n\t\t\tread(reader, connection);\r\n\t\t}\r\n\r\n\r\n\t" +
                    "\tpublic override void read(DbDataReader reader, DbConnection connection) {\r\n\t\t\tt" +
                    "his.connection = connection;\r\n\t\t\tif (reader == null) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t" +
                    "int length = reader.FieldCount;\r\n\t\t\tfor (int i = 0; i < length; i++) {\r\n\t\t\t\tswit" +
                    "ch (reader.GetName(i)) {\r\n\t\t\t\t\tcase \"rowid\": _rowid = (long)reader.GetValue(i); " +
                    "break;\r\n\t\t\t\t\tcase \"CustomerID\": _CustomerID = reader.GetValue(i) as string; brea" +
                    "k;\r\n\t\t\t\t\tcase \"CompanyName\": _CompanyName = reader.GetValue(i) as string; break;" +
                    "\r\n\t\t\t\t\tcase \"ContactName\": _ContactName = reader.GetValue(i) as string; break;\r\n" +
                    "\t\t\t\t\tcase \"Address\": _Address = reader.GetValue(i) as string; break;\r\n\t\t\t\t\tcase " +
                    "\"City\": _City = reader.GetValue(i) as string; break;\r\n\t\t\t\t\tcase \"Region\": _Regio" +
                    "n = reader.GetValue(i) as string; break;\r\n\t\t\t\t\tcase \"PostalCode\": _PostalCode = " +
                    "reader.GetValue(i) as string; break;\r\n\t\t\t\t\tcase \"Country\": _Country = reader.Get" +
                    "Value(i) as string; break;\r\n\t\t\t\t\tcase \"Phone\": _Phone = reader.GetValue(i) as st" +
                    "ring; break;\r\n\t\t\t\t\tcase \"Fax\": _Fax = reader.GetValue(i) as string; break;\r\n\t\t\t\t" +
                    "\tdefault: break;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tpublic override Dictionary<string, objec" +
                    "t> getChangedValues() {\r\n\t\t\tvar changed = new Dictionary<string, object>();\r\n\t\t\t" +
                    "if (_CustomerIDChanged)\r\n\t\t\t\tchanged.Add(\"CustomerID\", _CustomerID);\r\n\t\t\tif (_Co" +
                    "mpanyNameChanged)\r\n\t\t\t\tchanged.Add(\"CompanyName\", _CompanyName);\r\n\t\t\tif (_Contac" +
                    "tNameChanged)\r\n\t\t\t\tchanged.Add(\"ContactName\", _ContactName);\r\n\t\t\tif (_AddressCha" +
                    "nged)\r\n\t\t\t\tchanged.Add(\"Address\", _Address);\r\n\t\t\tif (_CityChanged)\r\n\t\t\t\tchanged." +
                    "Add(\"City\", _City);\r\n\t\t\tif (_RegionChanged)\r\n\t\t\t\tchanged.Add(\"Region\", _Region);" +
                    "\r\n\t\t\tif (_PostalCodeChanged)\r\n\t\t\t\tchanged.Add(\"PostalCode\", _PostalCode);\r\n\t\t\tif" +
                    " (_CountryChanged)\r\n\t\t\t\tchanged.Add(\"Country\", _Country);\r\n\t\t\tif (_PhoneChanged)" +
                    "\r\n\t\t\t\tchanged.Add(\"Phone\", _Phone);\r\n\t\t\tif (_FaxChanged)\r\n\t\t\t\tchanged.Add(\"Fax\"," +
                    " _Fax);\r\n\r\n\t\t\treturn changed;\r\n\t\t}\r\n\r\n\t\tpublic override object[] getAllValues() " +
                    "{\r\n\t\t\treturn new object[] {\r\n\t\t\t\t_CustomerID,\r\n\t\t\t\t_CompanyName,\r\n\t\t\t\t_ContactNa" +
                    "me,\r\n\t\t\t\t_Address,\r\n\t\t\t\t_City,\r\n\t\t\t\t_Region,\r\n\t\t\t\t_PostalCode,\r\n\t\t\t\t_Country,\r\n\t" +
                    "\t\t\t_Phone,\r\n\t\t\t\t_Fax\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tpublic override string[] getColumns() {\r\n\t" +
                    "\t\treturn new string[] {\r\n\t\t\t\t\"CustomerID\",\r\n\t\t\t\t\"CompanyName\",\r\n\t\t\t\t\"ContactName" +
                    "\",\r\n\t\t\t\t\"Address\",\r\n\t\t\t\t\"City\",\r\n\t\t\t\t\"Region\",\r\n\t\t\t\t\"PostalCode\",\r\n\t\t\t\t\"Country\"" +
                    ",\r\n\t\t\t\t\"Phone\",\r\n\t\t\t\t\"Fax\",\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tpublic override string getPKName() " +
                    "{\r\n\t\t\treturn \"rowid\";\r\n\t\t}\r\n\r\n\t\tpublic override object getPKValue() {\r\n\t\t\treturn" +
                    " _rowid;\r\n\t\t}\r\n\t}\r\n}");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\mepengadmin\Source\Workspaces\DtronixModel\DtxModel\DtxModelGen\CodeGen\TableModel.tt"

private global::DtxModelGen.Schema.Dbml.Table _db_tableField;

/// <summary>
/// Access the db_table parameter of the template.
/// </summary>
private global::DtxModelGen.Schema.Dbml.Table db_table
{
    get
    {
        return this._db_tableField;
    }
}

private string _namespaceField;

/// <summary>
/// Access the namespace parameter of the template.
/// </summary>
private string @namespace
{
    get
    {
        return this._namespaceField;
    }
}

private global::DtxModelGen.TypeTransformer _type_transformerField;

/// <summary>
/// Access the type_transformer parameter of the template.
/// </summary>
private global::DtxModelGen.TypeTransformer type_transformer
{
    get
    {
        return this._type_transformerField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool db_tableValueAcquired = false;
if (this.Session.ContainsKey("db_table"))
{
    this._db_tableField = ((global::DtxModelGen.Schema.Dbml.Table)(this.Session["db_table"]));
    db_tableValueAcquired = true;
}
if ((db_tableValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("db_table");
    if ((data != null))
    {
        this._db_tableField = ((global::DtxModelGen.Schema.Dbml.Table)(data));
    }
}
bool namespaceValueAcquired = false;
if (this.Session.ContainsKey("namespace"))
{
    this._namespaceField = ((string)(this.Session["namespace"]));
    namespaceValueAcquired = true;
}
if ((namespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("namespace");
    if ((data != null))
    {
        this._namespaceField = ((string)(data));
    }
}
bool type_transformerValueAcquired = false;
if (this.Session.ContainsKey("type_transformer"))
{
    this._type_transformerField = ((global::DtxModelGen.TypeTransformer)(this.Session["type_transformer"]));
    type_transformerValueAcquired = true;
}
if ((type_transformerValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("type_transformer");
    if ((data != null))
    {
        this._type_transformerField = ((global::DtxModelGen.TypeTransformer)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class TableModelBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
